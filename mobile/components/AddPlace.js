'use strict';

var React = require('react-native');
var ViewCreatedTour = require('./ViewCreatedTour');
var SelectImage = require('./SelectImage');
var utils = require('../lib/utility');
var t = require('tcomb-form-native');
var Form = t.form.Form;
var formStyles = require('../lib/form_stylesheet');
var styles = require('../lib/stylesheet');
var {GooglePlacesAutocomplete} = require('react-native-google-places-autocomplete');


var {
  Component,
  StyleSheet,
  Text,
  TextInput,
  TouchableHighlight,
  View,
  Image
} = React;

// Place defines domain model for form.
var Place = t.struct({
  placeName: t.maybe(t.String),
  // address: t.maybe(t.String),
  description: t.maybe(t.String),
  placeOrder: t.maybe(t.Number)
});

var options = {
  auto: 'placeholders',
  fields: {
    placeName: {
      placeholder: 'Place',
      placeholderTextColor: '#FFF',
    },
    description: {
      placeholder: 'Description',
      placeholderTextColor: '#FFF'
    },
    placeOrder: {
      placeholder: 'Order',
      placeholderTextColor: '#FFF'
    }
  },
  stylesheet: formStyles
};

class AddPlace extends Component {
  
  /**
   * Creates an instance of AddPlace.
   */
  constructor(props) {
    super(props);
    this.state = {
      tourId: this.props.tourId || this.props.route.passProps.tourId,
      placeId: null,
      address: null,
      placeName: '',
      description: '',
      placeOrder: '',
      address: ''
    };
  }

  /**
   * Gets place details using tcomb-form-native getValue method and posts it in the database.
   */
  onPressSave () {
    /**
     * getValue() gets the values of the form.
     */
    var tourId = this.state.tourId;
    var newPlace = this.refs.form.getValue();
    var options = {
      reqBody: {
                placeName: newPlace.placeName,
                address: this.state.address,
                description: newPlace.description,
                placeOrder: newPlace.placeOrder,
                tourId: tourId
              }
    };

    var component = this;
    utils.makeRequest('addPlace', component, options)
      .then(response => {
        console.log('response body in Add Place: ', response);
        component.setState({
          placeId: response.id.placeId
        })
        var props = {
          placeId: this.state.placeId,
          tourId: this.state.tourId,
          addPlaceView: true
        }
        utils.navigateTo.call(this, "Add a Photo", SelectImage, props);
        // var placeId = response.id
        // utils.navigateTo.call(this, "Add a Photo", SelectImage, {placeId});
        // utils.navigateTo.call(this, 'View Tour', ViewCreatedTour, {tourId});
      });
  }

  addPhoto() {
    /*TODO: this should send a put request to update place photo, needs placeId*/
    var tourId = this.state.tourId;
    utils.navigateTo.call(this, "Select a Tour Photo", SelectImage, {tourId});
  }

  onChange(value) {
    this.setState(value);
  }

  /**
   * renders a form generated by tcomb-form-native based on the domain model 'Place'.
   */
  render () {
    return (
      <View style={ styles.addPlaceContainer }>
        <View style={{marginTop: 70}}>
          <Form
            ref="form"
            type={ Place }
            options={ options }
            value={this.state.value}
            onChange={this.onChange.bind(this)}/>
        </View>

      <GooglePlacesAutocomplete
        placeholder='Search for address'
        minLength={3} // minimum length of text to search 
        autoFocus={false}
        fetchDetails={true}
        onPress={(data, details = null) => { // 'details' is provided when fetchDetails = true 
          console.log('data: ', data);
          console.log('address: ', details.formatted_address)
          this.setState({ address: details.formatted_address });
        }}
        getDefaultValue={() => { return ''; }} // text input default value
        query={{ key: 'AIzaSyBpYCMNdcQg05gC87GcQeEw866rHpA9V1o', language: 'en' }}  // language of the results
        GooglePlacesSearchQuery={{ rankby: 'distance' }}/>// types: 'food',
         
        {/*<TouchableHighlight onPress={ this.addPhoto.bind(this) } underlayColor='#727272' style={{marginTop: 25}}>
          <View style={ styles.photoAudioContainer }>   
            <View style={{marginTop: 25}}>
              <Text style={ styles.text }>Add a Photo</Text>
            </View>
            <View>
              <Image source={require('../assets/photoicon.png')} style={styles.photoIcon}/> 
            </View>
          </View>   
        </TouchableHighlight>
        
          
        <TouchableHighlight onPress={() => alert('add Audio')} underlayColor='#727272' style={{marginTop: 20}}>
          <View style={ styles.photoAudioContainer }>
            <View style={{marginTop: 25}}>
              <Text style={ styles.text }>Add Audio</Text>
            </View>
            <View>
              <Image source={require('../assets/audioicon.png')} style={styles.audioIcon}/>
            </View>
          </View>  
        </TouchableHighlight>*/}

        <TouchableHighlight 
          style={ [styles.button, {padding: 12}] } 
          onPress={ this.onPressSave.bind(this) } 
          underlayColor='#FFC107'>
          <Text style={ styles.buttonText }>Next</Text>
        </TouchableHighlight>
      </View>
    );
  }
};

module.exports = AddPlace;
